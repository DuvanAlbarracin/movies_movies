// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pkg/proto/genre.proto

package genre

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GenreServiceClient is the client API for GenreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenreServiceClient interface {
	GetGenreById(ctx context.Context, in *GetGenreByIdRequest, opts ...grpc.CallOption) (*GetGenreByIdResponse, error)
	GetAllGenres(ctx context.Context, in *GetAllGenresRequest, opts ...grpc.CallOption) (*GetAllGenresResponse, error)
	AddGenderToMovie(ctx context.Context, in *AddGenderToMovieRequest, opts ...grpc.CallOption) (*AddGenderToMovieResponse, error)
	RemoveGenderFromMovie(ctx context.Context, in *RemoveGenderFromMovieRequest, opts ...grpc.CallOption) (*RemoveGenderFromMovieResponse, error)
}

type genreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenreServiceClient(cc grpc.ClientConnInterface) GenreServiceClient {
	return &genreServiceClient{cc}
}

func (c *genreServiceClient) GetGenreById(ctx context.Context, in *GetGenreByIdRequest, opts ...grpc.CallOption) (*GetGenreByIdResponse, error) {
	out := new(GetGenreByIdResponse)
	err := c.cc.Invoke(ctx, "/genre.GenreService/GetGenreById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) GetAllGenres(ctx context.Context, in *GetAllGenresRequest, opts ...grpc.CallOption) (*GetAllGenresResponse, error) {
	out := new(GetAllGenresResponse)
	err := c.cc.Invoke(ctx, "/genre.GenreService/GetAllGenres", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) AddGenderToMovie(ctx context.Context, in *AddGenderToMovieRequest, opts ...grpc.CallOption) (*AddGenderToMovieResponse, error) {
	out := new(AddGenderToMovieResponse)
	err := c.cc.Invoke(ctx, "/genre.GenreService/AddGenderToMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) RemoveGenderFromMovie(ctx context.Context, in *RemoveGenderFromMovieRequest, opts ...grpc.CallOption) (*RemoveGenderFromMovieResponse, error) {
	out := new(RemoveGenderFromMovieResponse)
	err := c.cc.Invoke(ctx, "/genre.GenreService/RemoveGenderFromMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenreServiceServer is the server API for GenreService service.
// All implementations must embed UnimplementedGenreServiceServer
// for forward compatibility
type GenreServiceServer interface {
	GetGenreById(context.Context, *GetGenreByIdRequest) (*GetGenreByIdResponse, error)
	GetAllGenres(context.Context, *GetAllGenresRequest) (*GetAllGenresResponse, error)
	AddGenderToMovie(context.Context, *AddGenderToMovieRequest) (*AddGenderToMovieResponse, error)
	RemoveGenderFromMovie(context.Context, *RemoveGenderFromMovieRequest) (*RemoveGenderFromMovieResponse, error)
	mustEmbedUnimplementedGenreServiceServer()
}

// UnimplementedGenreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGenreServiceServer struct {
}

func (UnimplementedGenreServiceServer) GetGenreById(context.Context, *GetGenreByIdRequest) (*GetGenreByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenreById not implemented")
}
func (UnimplementedGenreServiceServer) GetAllGenres(context.Context, *GetAllGenresRequest) (*GetAllGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGenres not implemented")
}
func (UnimplementedGenreServiceServer) AddGenderToMovie(context.Context, *AddGenderToMovieRequest) (*AddGenderToMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenderToMovie not implemented")
}
func (UnimplementedGenreServiceServer) RemoveGenderFromMovie(context.Context, *RemoveGenderFromMovieRequest) (*RemoveGenderFromMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGenderFromMovie not implemented")
}
func (UnimplementedGenreServiceServer) mustEmbedUnimplementedGenreServiceServer() {}

// UnsafeGenreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenreServiceServer will
// result in compilation errors.
type UnsafeGenreServiceServer interface {
	mustEmbedUnimplementedGenreServiceServer()
}

func RegisterGenreServiceServer(s grpc.ServiceRegistrar, srv GenreServiceServer) {
	s.RegisterService(&GenreService_ServiceDesc, srv)
}

func _GenreService_GetGenreById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenreByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).GetGenreById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genre.GenreService/GetGenreById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).GetGenreById(ctx, req.(*GetGenreByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_GetAllGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).GetAllGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genre.GenreService/GetAllGenres",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).GetAllGenres(ctx, req.(*GetAllGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_AddGenderToMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGenderToMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).AddGenderToMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genre.GenreService/AddGenderToMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).AddGenderToMovie(ctx, req.(*AddGenderToMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_RemoveGenderFromMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGenderFromMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).RemoveGenderFromMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genre.GenreService/RemoveGenderFromMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).RemoveGenderFromMovie(ctx, req.(*RemoveGenderFromMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenreService_ServiceDesc is the grpc.ServiceDesc for GenreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genre.GenreService",
	HandlerType: (*GenreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGenreById",
			Handler:    _GenreService_GetGenreById_Handler,
		},
		{
			MethodName: "GetAllGenres",
			Handler:    _GenreService_GetAllGenres_Handler,
		},
		{
			MethodName: "AddGenderToMovie",
			Handler:    _GenreService_AddGenderToMovie_Handler,
		},
		{
			MethodName: "RemoveGenderFromMovie",
			Handler:    _GenreService_RemoveGenderFromMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/genre.proto",
}
